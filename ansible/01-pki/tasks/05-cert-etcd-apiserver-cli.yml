# ansible/01-pki/tasks/05-cert-etcd-apiserver-cli.yml
---
- name: Verificar arquivos existentes da chave para cliente mTLS do apiserver para Etcd
  ansible.builtin.stat:
    path: "{{ arquivo }}"
  loop:
    - "{{ pki_certs.etcd_apiserver_cli.path_chave }}"
    - "{{ pki_certs.etcd_apiserver_cli.path_cert }}"
  loop_control:
    loop_var: arquivo
    label: "{{ arquivo }}"
  register: etcd_apiserver_cli_arquivos
  delegate_to: localhost

- name: Criar chave privada do certificado para cliente mTLS do apiserver para Etcd
  community.crypto.openssl_privatekey:
    path: "{{ pki_certs.etcd_apiserver_cli.path_chave }}"
    type: "{{ pki_cifra_tipo }}"
    curve: "{{ pki_cifra_algo }}"
    state: "present"
    force: true
  when: not etcd_apiserver_cli_arquivos.results[0].stat.exists or (pki_regerar_certs | default(false) | bool)
  delegate_to: localhost

- name: Gerar CSR do certificado para cliente mTLS do apiserver para Etcd
  community.crypto.openssl_csr_pipe:
    privatekey_path: "{{ pki_certs.etcd_apiserver_cli.path_chave }}"
    digest: "{{ pki_algoritmo_hash }}"
    subject: "{{ pki_subject_padrao 
      | combine({
        'OU': 'Cliente Etcd para API Server',
        'CN': 'etcd-apiserver-client'
      })
    }}"
    use_common_name_for_san: false
    key_usage:
      - digitalSignature
    key_usage_critical: true
    extended_key_usage:
      - clientAuth
    extended_key_usage_critical: true
    subject_alt_name: "{{ lookup('template', '05-san-etcd-apiserver-cli.j2') | from_yaml }}"
  when: not etcd_apiserver_cli_arquivos.results[1].stat.exists or (pki_regerar_certs | default(false) | bool)
  delegate_to: localhost
  register: etcd_apiserver_cli_csr

- name: Assinar certificado para cliente mTLS do apiserver para Etcd com o respectivo CA intermedi√°rio
  community.crypto.x509_certificate:
    path: "{{ pki_certs.etcd_apiserver_cli.path_cert }}"
    csr_content: "{{ etcd_apiserver_cli_csr.csr }}"
    provider: ownca
    ownca_path: "{{ pki_certs.etcd_apiserver_cli.ca_pai.path_cert }}"
    ownca_privatekey_path: "{{ pki_certs.etcd_apiserver_cli.ca_pai.path_chave }}"
    ownca_digest: "{{ pki_algoritmo_hash }}"
    ownca_not_after: "+{{ pki_validade.certificado | default(30) }}d"
    mode: "0644"
    force: true
  when: not etcd_apiserver_cli_arquivos.results[1].stat.exists or (pki_regerar_certs | default(false) | bool)
  delegate_to: localhost
